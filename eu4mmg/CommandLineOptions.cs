using CommandLine;
using CommandLine.Text;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace eu4mmg {
    internal class CommandLineOptions {
        [Option('n', "display-name", HelpText = "Specify the display name of the mod. Only ASCII characters are allowed. The default value is \"Music Mod\".")]
        public string DisplayName { get; set; } = null; // = "Music Mod"; // todo: extract it to a const

        [Option('m', "name", HelpText = "Specify the name of the mod. Only letters, numbers and underlines are allowed. A name generated by mod's display name will be appointed if omitted.")]
        public string Name { get; set; } = null;

        [Option('f', "mod-file", HelpText = "Specify the name of output mod file. The extension of mod filename must be " + Def.ModFileDefaultExt + ". If not, a " + Def.ModFileDefaultExt + " extension will be appended to it. A filename generated by mod's name will be appointed if omitted.")]
        public string ModFile { get; set; } = null;

        [Option('d', "mod-dir", HelpText = "Output to a directory. Cannot be combined with --mod-ar.")]
        public bool ModDir { get; set; } = false;
        
        [Option('a', "mod-ar", HelpText = "Output to an archive file. Cannot be combined with --mod-dir. Option --mod-ar is default if neither --mod-dir nor --mod-ar is specified.")]
        public bool ModAr { get; set; } = false;

        [Option('o', "output", HelpText = "Specify the name of output directory or archive file. Default value is <mod-file-location>/<mod-file-name>/ or <mod-file-location>/<mod-file-name>.zip.")]
        public string Output { get; set; } = null;

        public List<string> SongStrings { get; } = new List<string>();
        [Option('s', "song", HelpText = "Receive arguments like <song-filename>[;<song-name>[;<song-internal-name>]] to add a song.")]
        public string Song { get => ""; set => SongStrings.Add(value); }
        
        [Option('w', "temp-dir", HelpText = "Specify a temp directory. Don't specify it unless you really need to do so.")]
        public string TempDir { get; set; } = null;
        
        [Option('v', "version", HelpText = "Specify the version for mod to support. Required.")]
        public string Ver { get; set; } = null;

        [Option('q', "quiet", HelpText = "Be quiet. Do not output anything to stdout. Option -q has higher priority than -i.")]
        public bool Quiet { get; set; } = false;

        [Option('i', "detail", HelpText = "Display detail infos.")]
        public bool Detail { get; set; } = false;

        public bool DisplayHelp { get; private set; } = false;
        [HelpOption('?', "help", HelpText = "Display help info.")]
        public string GetUsage() {
            DisplayHelp = true;

            var help = new HelpText {
                Heading = new HeadingInfo(Def.ProgramName, Def.ProgramVersion.ToString(3)),
                Copyright = new CopyrightInfo(Def.Author, 2018, DateTime.Now.Year),
                AdditionalNewLineAfterOption = true,
                AddDashesToOption = true,
                MaximumDisplayWidth = 120
            };
            help.AddPreOptionsLine(" ");
            help.AddPreOptionsLine(Def.OpenSourceInfo);
            help.AddOptions(this);
            help.AddPostOptionsLine("E.g. eu4mmg -n wa2 -m wa_ii -f wa2.mod -d -o ./wa2/ -v 1.28 -s todo.ogg;Todo -q");
            help.AddPostOptionsLine("E.g. eu4mmg -n \"Tora Dora\" -f td.mod -a -o td.zip -s pure.ogg;Pure;s0 -s bani.mp3;Bani;s1 -v 1.27.*.*");
            help.AddPostOptionsLine("");
            help.AddPostOptionsLine("Be aware that the name of the mod, the name of output mod file, " +
                                    "the name of output directory and the name of output archive file can only contain ASCII printable characters, " +
                                    "as well as the name and filename of all songs. If not, proper (but not always recognizable) names will be assigned.");
            help.AddPostOptionsLine("");
            return help;
        }
    }
}
